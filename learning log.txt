01 july 2019 - building a basic client for server

starting off, just want to get my mongo showlist to display..

i want to display show banners, which have urls embedded in the JSON tvdb response. tested a response URL i the browser to get just the banner, and got an authorisation issue.  have no idea how i'm going to resolve this from the client (which does not authorise directly with TVDB, due to CORS issues on the TVDB server).. problem for later.  i'll just try and list the show names and ids instead.

following this tutorial for basic boilerplate that i can then edit:
https://pusher.com/tutorials/consume-restful-api-react
(and referencing this https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)

was getting an empty list back and couldn't work out why.  put console logs in but nothing displayed. couldn't work out why console log on vscode not showing anything - finally realised it shows in the browser dev tools console, so istalled react dev tools extesion in chrome, and found the console there.

discovered in cconsole that its CORS messing me up again - didn't think it would be a problem from same IP, but it cares about port too >:( so had to learn all of this:
https://medium.com/@xinganwang/a-practical-guide-to-cors-51e8fd329a1f

added methods in server to add cors exceptions to responses (though chrome doesn't allow localhost so had to do *)

web app now displays shows correctly, so time to learn about react components..
https://reactjs.org/docs/components-and-props.html
https://scotch.io/tutorials/create-a-simple-to-do-app-with-react
https://reactjs.org/docs/refs-and-the-dom.html

realised i couldn't pass query params with fetch and have to construct the URL manually - this had me stuck for ages. finally added console logs in the server to work out what was going on, then removed them.
https://github.com/github/fetch/issues/256

boilerplate used array.prototype.filter and array.prototype.map so had to learn those
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map

in ShowList component, had to do  // eslint-disable-next-line jsx-a11y/anchor-is-valid on an <a> ref on a button-not-a-button.. need to work out accessible way of doing this..

got everything work for show list. now to remove the anchor issue.. that was easy, just changed it to a button. that's it for today, time to upload to git.

08 july 2019 - writing an add show popup which searches for shows and lets you add them

going to write a popup which allows users to search for shows and add them.

first need to understand popups.  using this example:
https://codepen.io/bastianalbers/pen/PWBYvz?editors=0010

(the example code extends react component and uses render.. whereas my previous components expose a constant which doesn't have state, just jsx, and is passed the handlers for all interactions.. i don't really know what the difference is so for now i'm changing the rendering to just a const to be the same as the others)

Getting "ReactJS: Maximum update depth exceeded error".. looking up
https://stackoverflow.com/questions/48497358/reactjs-maximum-update-depth-exceeded-error

think there's a problem with the line in the popup component which is:
        <button onClick={closePopup()}>Done</button>
for reasons i don't understand, even though i think i'm only calling that function when the button is clicked, it's still being called on rendering, ad infinitum. no idea why.
fixed it by changing the line to
        <button onClick={closePopup}>Done</button>
if i want to pass parameters, i need to do:
	<button onClick={(event) => closePopup(event, myParam)}>Done</button>
-or-
	<button onClick={(event) => {
             // set the value of myParam
             closePopup(event, myParam)
         }>Done</button>
again, not sure why.

seems to be working now, but this method:

  togglePopup() {
    console.log("at start of function, showPopup is" + this.state.showPopup);
    this.setState({
      showPopup: !this.state.showPopup
    });
    console.log(
      "after setting state, showpopup is now " + this.state.showPopup
    );
  }

(whilst we're here, I also don't understand why I can't do 'showPopup is ${this.state.showPopup}' here, like I do in the node server)

on click to show popup the output to console is this:
at start of function, showPopup is false
after setting state, showpopup is now false

on click to hide popup the output to console is this:
at start of function, showPopup is true
after setting state, showpopup is now true

I *think* it's to do with the fact that the setstate thing is guaranteed to call when i call it, rather it batches things up to optimise.. either way, it makes debugging take lots longer!

I think I see the issue with having my component as just a constant returning JSX now rather than something which extends a react component.  I need to adapt my popup to uses a list shows component but with a different state to the main app.  The main app has a show state of the shows I have "favourited" but the find shows popup needs to have a state of "the shows i have searched for".  

converted to a class, now i'm not sure where to set local variables in a react component. reading this:
https://stackoverflow.com/questions/47417217/where-to-declare-variable-in-react-js
i need to set it in the constructor like this:
    constructor(props) {
        super(props);
        this.input = "";
    }

after more bug fixing, finally got the popup working, searching for shows, and adding them.

Next problem is that if the list is too long, it goes off the bottom of the page with no scroll bar.

Have managed to fix the problem ish - the CSS of the popup is absolute and fixed, and does not scroll within the page.  I removed the absolute nature of it.  Now getting formatting issues, but at least I can see and select all listed shows now.  Formatting problems are for another day..

Whilst the results list is wating for results to return, it says "no shows found".  I only want it to say no shows found when it has returned.  Don't know how to do this..

Last thing for today - used reactstrap to get container layouts to put an appbar and a stub for the calendar.

09 july 2019 - make column sizing responsive and add checkbox to show future dates
----------------------------------------------------------------------------------

for responsiveness, followed this link:
https://stackoverflow.com/questions/24175998/meaning-of-numbers-in-col-md-4-col-xs-1-col-lg-2-in-bootstrap

for checkbox, these:
https://www.w3schools.com/js/js_date_methods.asp
https://codepen.io/dsabalete/pen/jAzLpA

now have an issue where checkbox gets out of sync.  it's 23:27 now though, so i'll look at this another day.

11 july 2019 - fix problem with checkbox out of sync, look at performance (8hrs)
-------------------------------------------------------------------------

figured out how to use react debugger in chrome - it's awesome! makes debugging loads easier.
changed server so that filtering is done client side, not conintually calling tvdb for a new showlist each time
now, client caches complete showlist, and keeps also a filtered show list (which is rendered).
changed method for filtering this list to accept two date ranges, in prep for changing controls to date filter, rather than just "show only future"
fixed client such that filtered list does not depend on a state value which may or may not have yet been set
show calendar now only calls tvdb on load, and filtering all client side - loads faster.
fixed issue where empty episode names were blank - now says "Untitled"
added a message to indicate when show calendar is being built, rather than a blank screen
changed date format in showcalendar to dddd, dd mmmm, yyyy (added a date js file to do the date formatting, needed to do array lookups as the native Date class is a bit lacking)
added a "only show next episode" filter, which filters out all the other episodes passed the first (next) in the list.  implemented a sort of mediator method to do the filtering based on the values of both check boxes, because it wasn't working at first due to the filtering being different based on the order you clicked the check boxes.
omg, it's actually useful now..
tried to convert showlist component into a class extending react component to have state, passing the state of app.js to the component to list the shows i've added - to deal with the problem where i can't tell if it's because the show hasn't rendered yet. ran into a problem where the state of app.js wasn't yet finished before componentdidmount was called, so state was always empty. 
think i need to have the decision on whether or not the state is ready in the parent component, and have the showlist component dumb (maybe says "Loading.."- it knows that much).
finally got the start message/searching/non found thing by putting this code in the parent component's render method:
    var results;
    if (this.state.resultsList.length < 1) {
      if (this.state.doneFirstSearch === false) {
        results = <div>Type the name of a show and hit search.</div>;
      } else if (this.state.searching === true) {
        results = <div>Searching..</div>;
      } else {
        results = <div>No shows found.</div>;
      }
    } else {
      results = (
        <ShowList
          showList={this.state.resultsList}
          handleShowClicked={this.props.handleShowClicked}
        />
      );
    }

.. and adding flags in the search method (handler for search click) to tell the state when it is searching/finished/not done a search yet... so i don't show the search list component if it is empty.

two jobs needed now - attach event handler to hitting ENTER on search box (currently you have to click search), and refresh the calendar when shows are added/removed..

.. on refreshing the calendar

initially tried to get it working through passing in methods using bind() - couldn't really get it to work, and its application was confusing for me:
https://stackoverflow.com/questions/39041710/react-js-change-child-components-state-from-parent-component/39041951
https://stackoverflow.com/questions/2236747/use-of-the-javascript-bind-method

finally gotting working using React.createref and calling update calendar in the child component, ensuring that the first thing that component does is clears its state, forcing the render method to show a "building calendar" message.  called that from closing the popup on add show (rather than each add show - to save on calls) and on remove show (since a show can be independently removed one by one)
https://www.freecodecamp.org/news/react-changing-state-of-child-component-from-parent-8ab547436271/

now just for the event on return on adding shows..

this code i boilerplated has been bothering me for a while.. i don't understand it's purpose

  constructor(props) {
    super(props);
    this.input = "";
  }
  ...
  <input
    ref={node => {
      this.input = node;
    }}
  />

think the answer to both my problems is in using react forms..
https://reactjs.org/docs/forms.html

(also whilst i'm here, time to figure out the difference between state intialisation in a constructor and out of it)
https://daveceddia.com/where-initialize-state-react/
.. it's the same

implemented it as a form..
         <form onSubmit={this.handleSubmitSearch}>
            <input
              type="text"
              value={this.state.value}
              onChange={this.handleSearchTermChange}
            />
            <input type="submit" value="Search" />
          </form>

had to create a constructor to bind those methods.. not sure why for this and not for others.. must be to do with how the dom handles the event

also had to add event.preventDefault() to prevent form from closing before a show is added.. done now though!

found a bug where rapid tapping on submit causes multiple entries of same thing to appear in results.

fixed it.. i needed to put the clear in the callback in the findshows method, not at the start of the findshows method

next up for another day - a few bugs - one where i don't have unique keys in showlist, one where i can add duplicate shows, and one where closing the search popup without adding new shows still causes the showlist to update. 23:43 now though..

12 jul 2019 - fixing some bugs (5hrs)

fixed the bug where showcalendar would update by changing the togglepopup to be
    if (this.state.showAdded) {
      this.setState({ showAdded: false });
      this.calendar.current.updateShowCalendar();
    }
.. and setting state of showAdded to true in handleAddShow, if successful.

fixed dupe shows - lloked here
https://stackoverflow.com/questions/50371188/javascripts-includes-function-not-working-correctly-with-array-of-objects

and implemented this before the fetch in handleaddshow

const duplicate = this.state.showList.some(elem => {
            return (
              JSON.stringify({ id: show.id, name: show.name }) ===
              JSON.stringify(elem)
            );
          });

          if (!duplicate) {
            this.state.showList.push({ id: show.id, name: show.name });
            this.setState({ showAdded: true });
          }
this wasn't working. for some reason duplicate was false.  when i compared them, i found that somewhere, for some reason id was not wrapped in quotes from tvdb response, but wrapped in quotes everywhere else, after a couple hours of frigging around with console logging, react debugging, and json conversions, finally got it working.  something was doing typecasting somewhere.  my first taste of the problems with a non typesafe language.. stupid javascript.

finally, after much ado, fixed the showcalendar not having a key issue, just by adding the key to each <p>. i thought it referred to the state data structure, but it's referring to the rendered array. got it.

two things to address next: first, the popup which doesn't grow to accomodate a growing results list; and second, that "no shows added" is rendered in 2 circumstances: 1) where the showlist hasn't yet returned from fetch; 2) when no shows have been added.  i only want the message displayed in the second instance, but showlist does not have state.  wonder if i can use react ref again, so that the parent can tell the component when it has no shows.

..nope, but adding this logic in app.js render got it working:
    let showList = <p>Populating show list.."</p>
    if (this.state.retrievedShows && this.state.showList.length < 1) {
      showList = <p>No shows added. Click Add Show above to add shows.</p>
    } else {
      showList = (
        <ShowList
          showList={this.state.showList}
          handleShowClicked={this.handleRemoveShow.bind(this)}
        />
      );
    }

re the popup not expanding on list, i kinda fixed it by putting the results in a div with styles
.list {
  height: 100%;
  overflow-y:auto;
}
which works ish - the div is bigger than the popup now, and things i add after the popup are outside of it. no idea why, but that's cos i don't really understand the CSS.  that's prolly the next job.

22 jul 2019 - 8 hours
-----------

spent a long time converting arrays in the server to use map and filter and foreach.  got lots of bugs in certain parts - where things are asynchronous - so reverted back to original.  did keep some conversions though - i think there's more to do in the client.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter

optimised all the array handling to use maps and filters in client - few instances.

now to learn about hooks - it's the new thang
https://reactjs.org/docs/hooks-intro.html
https://reactjs.org/docs/hooks-overview.html

got it working for most components, except showcalendar which i was previously using creatref for - that doesn't seem to be working properly any more. nor does binding methods to this for the popup stuff..

ok, i've updated everything, it's sort of working except for two issues which i've added comments to in ShowCalendarDoesntWork and App.js - to do with getting show calendar to update properly.

however, it is now midnight, so a problem for another day.

29 july 2019 - 7.5 hours
Had some mentoring at work, it occurs to me that I'm missing some React basics - so, time to work steadily through all of this:
https://reactjs.org/docs/introducing-jsx.html

read it all, learnt quite a bit - finally refactored everything to functional components and hooks and got all my code working, with one niggling problem which i've been trying to fix for the last few hours, and can't for the life of me work out why it's happening - the useEffect is calling the fetch for show lists three times with every change, and i've no idea why.  it doesn't break the app, but i've no idea why it's doing it.

another hour later, finally worked it out - the server was calling its own api twice, and showcalendar was calling twice (once when the showlist was initially empty, then again once it got populated) fixed it by only calling when the showlist has shows in it, and by removing the extra call in the server. phhhheewww.

got a couple extra bugs now - one where if there is no shows, the calendar sits on "please wait" indefinitely, and another when you remove the final show, the calendar still has it listed.

fixed those bugs - there was some state confusion after adding the "if showList>0" test in the useeffect of showcalendar, where it didn't update the showlist when that list reduced to zero, and diudn't update the await flag on the fetch
